// Defined variables with key strings to be autocompleted by the IDE
$background-color: 'background-color';
$card-background-color: 'card-background-color';
$button-background-color: 'button-background-color';
$button-text-color: 'button-text-color';
$button-hover-background-color: 'button-hover-background-color';
$button-hover-text-color: 'button-hover-text-color';
$button-box-shadow-color: 'button-box-shadow-color';
$text-color: 'text-color';
$text-secondary-color: 'text-secondary-color';
$link-color: 'link-color';
$title-text-color: 'title-text-color';

// Chosen variables for each theme
$themes: (
    dark: (
        background-color: $page-background-color-dark,
        card-background-color: $card-background-color-dark,
        button-background-color: $button-background-color-dark,
        button-text-color: $button-text-color-dark,
        button-hover-background-color: $button-hover-background-color-dark,
        button-hover-text-color: $button-hover-text-color-dark,
        button-box-shadow-color: $button-box-shadow-color-dark,
        text-color: $main-text-color-dark,
        text-secondary-color: $secondary-text-color-dark,
        link-color: $link-color-dark,
        title-text-color: $title-text-color-dark
    ),
    light: (
        background-color: $page-background-color-light,
        card-background-color: $card-background-color-light,
        button-background-color: $button-background-color-light,
        button-text-color: $button-text-color-light,
        button-hover-background-color: $button-hover-background-color-light,
        button-hover-text-color: $button-hover-text-color-light,
        button-box-shadow-color: $button-box-shadow-color-light,
        text-color: $main-text-color-light,
        text-secondary-color: $secondary-text-color-light,
        link-color: $link-color-light,
        title-text-color: $title-text-color-light
    ),
);

// Themes a CSS attribute with a key from the theme map 
@mixin themed() {
    @each $theme, $map in $themes {
        .theme-#{$theme} & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
            @content;
            $theme-map: null !global;
        }
    }
}

// Gets a CSS attribute themed with a key 
@function t($key) {
    @return map-get($theme-map, $key);
}